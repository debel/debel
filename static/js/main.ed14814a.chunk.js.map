{"version":3,"sources":["Header.js","Table.js","data.js","HomePage.js","serviceWorker.js","index.js"],"names":["headerLinks","name","link","image","HeaderLinks","map","href","target","class","src","alt","Header","TableTitle","opened","text","onClick","colspan","TableItem","description","Table","title","items","React","useState","setOpened","toggleVisibility","useCallback","open","item","presentations","courses","hobbies","HomePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAEMA,G,MAAc,CAClB,CACEC,KAAM,SACNC,KAAM,2BACNC,MAAO,qBAET,CACEF,KAAM,UACNC,KAAM,+BACNC,MAAO,sBAET,CACEF,KAAM,kBACNC,KAAM,mUACNC,MAAO,oBAILC,EAAc,kBAClBJ,EAAYK,KAAI,gBAAGH,EAAH,EAAGA,KAAMD,EAAT,EAASA,KAAME,EAAf,EAAeA,MAAf,OACd,uBAAGG,KAAMJ,EAAMK,OAAO,UAAS,yBAAKC,MAAM,aAAaC,IAAKN,EAAOO,IAAKT,SAe7DU,EAXA,kBACb,4BAAQH,MAAM,yCACZ,yBAAKA,MAAM,SAASC,IAAI,0BAA0BC,IAAI,OACtD,yBAAKF,MAAM,SACT,8CACA,0EACA,kBAAC,EAAD,S,OC9BAI,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,QAAjB,OACjB,wBAAIP,MAAM,SAASO,QAASA,GAC1B,wBAAIC,QAAQ,IAAIR,MAAM,0BAA0BK,EAAS,SAAM,SAAKC,KAIlEG,EAAY,SAAC,GAAD,IAAGhB,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMgB,EAAf,EAAeA,YAAf,OAChB,uBAAGV,MAAM,cAAcF,KAAMJ,GAC3B,4BACE,wBAAIM,MAAM,sBAAsBP,GAChC,4BAAKiB,MAeIC,EAVD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAAY,EACNC,IAAMC,UAAS,GADT,mBAC3BV,EAD2B,KACnBW,EADmB,KAE5BC,EAAmBH,IAAMI,aAAY,kBAAMF,GAAU,SAAAG,GAAI,OAAKA,QAEpE,OAAQ,2BAAOnB,MAAM,wBACnB,kBAAC,EAAD,CAAYK,OAAQA,EAAQC,KAAMM,EAAOL,QAASU,IACjDZ,GAAUQ,EAAMhB,KAAI,SAAAuB,GAAI,OAAI,kBAAC,EAAcA,QCvBnCC,EAAgB,CAC3B,CACE5B,KAAM,0BACNC,KAAM,6CACNgB,YAAa,8EAEf,CACEjB,KAAM,uDACNC,KAAM,uEACNgB,YAAa,sGAEf,CACEjB,KAAM,gDACNC,KAAM,6CACNgB,YAAa,8GAEf,CACEjB,KAAM,qCACNC,KAAM,0CACNgB,YAAa,wFAEf,CACEjB,KAAM,gCACNC,KAAM,yDACNgB,YAAa,8FAEf,CACEjB,KAAM,8BACNC,KAAM,2CACNgB,YAAa,uGAIJY,EAAU,CACrB,CACE7B,KAAM,oBACNC,KAAM,+BACNgB,YAAa,yGAEf,CACEjB,KAAM,2CACNC,KAAM,wCACNgB,YAAa,+FAEf,CACEjB,KAAM,eACNC,KAAM,oCACNgB,YAAa,kDAIJa,EAAU,CACrB,CACE9B,KAAM,0BACNC,KAAM,sCACNgB,YAAa,4JAEf,CACEjB,KAAM,kCACNC,KAAM,yCACNgB,YAAa,6LCrCFc,G,MAfE,WACf,OAAQ,oCACN,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEZ,MAAM,qCACNC,MAAOQ,IACT,kBAAC,EAAD,CACET,MAAM,uCACNC,MAAOS,IACT,kBAAC,EAAD,CACEV,MAAM,iBACNC,MAAOU,OCPOE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed14814a.chunk.js","sourcesContent":["import React from 'react';\n\nconst headerLinks = [\n  {\n    name: 'Github',\n    link: 'https://github.com/debel',\n    image: 'images/github.svg',\n  },\n  {\n    name: 'Twitter',\n    link: 'https://twitter.com/debelbot',\n    image: 'images/twitter.svg',\n  },\n  {\n    name: 'Board Game Geek',\n    link: 'https://boardgamegeek.com/collection/user/debelbot?gallery=large&sort=rating&sortdir=desc&rankobjecttype=subtype&rankobjectid=1&columns=title%7Cstatus%7Cversion%7Crating%7Cbggrating%7Cplays%7Ccomment%7Ccommands&geekranks=Board%20Game%20Rank&excludesubtype=boardgameexpansion&own=1&objecttype=thing&ff=1&subtype=boardgame',\n    image: 'images/bgg.svg',\n  },\n];\n\nconst HeaderLinks = () => (\n  headerLinks.map(({ link, name, image }) => (\n    <a href={link} target=\"_blank\"><img class=\"header-img\" src={image} alt={name} /></a>\n  ))\n);\n\nconst Header = () => (\n  <header class=\"margined padded-top padded-bottom w40\">\n    <img class=\"avatar\" src=\"images/mihail-mikov.jpg\" alt=\"me\" />\n    <div class=\"hello\">\n      <h1>Hi, I'm Mihail</h1>\n      <p>software engineer, juggler, board game geek</p>\n      <HeaderLinks />\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst TableTitle = ({ opened, text, onClick }) => (\n  <tr class=\"handed\" onClick={onClick}>\n    <td colspan=\"2\" class=\"centered bolded larger\">{opened ? '➖' : '➕'}{text}</td>\n  </tr>\n);\n\nconst TableItem = ({ name, link, description }) => (\n  <a class=\"item tabled\" href={link}>\n    <tr>\n      <td class=\"w33 bolded colored\">{name}</td>\n      <td>{description}</td>\n    </tr>\n  </a>\n);\n\nconst Table = ({ title, items }) => {\n  const [opened, setOpened] = React.useState(false);\n  const toggleVisibility = React.useCallback(() => setOpened(open => !open));\n\n  return (<table class=\"margined w75 cleared\">\n    <TableTitle opened={opened} text={title} onClick={toggleVisibility}/>\n    {opened && items.map(item => <TableItem {...item} />)}\n  </table>);\n};\n\nexport default Table;\n","export const presentations = [\n  {\n    name: 'The evolution of an API',\n    link: 'https://debel.github.io/react-evolution/#/',\n    description: 'A presentation about the evolution of React\\'s APIs (with a focus on hooks)',\n  },\n  {\n    name: 'Concurrency Parallelism and Scheduling in JavaScript',\n    link: 'https://debel.github.io/concurrency-parallelism-and-scheduling-js/#/',\n    description: 'A presentation about JavaScript execution and concurrency model with some actors and csp thrown in',\n  },\n  {\n    name: 'Overview of the micro front-ends architecture',\n    link: 'https://debel.github.io/micro-frontends/#/',\n    description: 'A presentation about building sites as a collection of independently deliverable and deployable components',\n  },\n  {\n    name: 'Building resilient JavaScript APIs',\n    link: 'https://debel.github.io/resilient-js/#/',\n    description: 'A presentation about practises and patterns that can help make an API more resilient',\n  },\n  {\n    name: 'Git Panic and how to avoid it',\n    link: 'https://debel.github.io/git-panic-and-how-to-avoid-it/',\n    description: 'A presentation about using git without stress, helpful command options, and best practises',\n  },\n  {\n    name: 'Async Context in Javascript',\n    link: 'https://debel.github.io/async-context/#/',\n    description: 'A presentation about maintaining state across a \"thread\" of async function exections in JavaScript',\n  }\n];\n\nexport const courses = [\n  {\n    name: 'Modern JavaScript',\n    link: 'https://modern-js.github.io/',\n    description: 'A collection of presentations about JavaScript: langauge features and design, libraries and patterns.',\n  },\n  {\n    name: 'Full-stack JavaScript: React and Express',\n    link: 'https://debel.github.io/fullstack-js/',\n    description: 'A short course about building web applications with the popular React and Express libraries',\n  },\n  {\n    name: 'Intro to Git',\n    link: 'https://intro-to-git.github.io/#/',\n    description: 'A short course about version control with Git',\n  },\n];\n\nexport const hobbies = [\n  {\n    name: 'Juggling and JavaScript',\n    link: 'https://debel.github.io/juggling/#/',\n    description: 'A presentation about Juggling as a programmer\\'s hobby, the basics of site-swap notation, and a site-swap parser/interpreter implementation in JavaScript',\n  },\n  {\n    name: 'Intro to Board Games Mechanisms',\n    link: 'https://debel.github.io/board-games/#/',\n    description: 'A short presentation about the heart of modern board games - mechanisms - how players interact with the game and between each other and how the game incentivises them to make decisions',\n  },\n];\n","import React from 'react';\nimport Header from './Header';\nimport Table from './Table';\n\nimport { presentations, courses, hobbies } from './data';\n\nimport './HomePage.css';\n\nconst HomePage = () => {\n  return (<>\n    <Header />\n    <Table\n      title=\"Conference talks and presentations\"\n      items={presentations} />\n    <Table\n      title=\"Short courses and learning materials\"\n      items={courses} />\n    <Table\n      title=\"Hobby projects\"\n      items={hobbies} />\n  </>);\n};\n\nexport default HomePage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HomePage from './HomePage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HomePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}