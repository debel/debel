{"version":3,"sources":["HomePage.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","class","src","TableTitle","_ref","text","onClick","colspan","TableItem","_ref2","name","link","description","href","Table","_ref3","title","items","_React$useState","React","useState","_React$useState2","Object","slicedToArray","visible","setVisible","toggleVisibility","useCallback","HomePage_TableTitle","map","item","HomePage_TableItem","presentations","courses","HomePage","Fragment","HomePage_Header","HomePage_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_HomePage_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAGMA,SAAS,kBACbC,EAAAC,EAAAC,cAAA,UAAQC,MAAM,yCACZH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SAASC,IAAI,sBACxBJ,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SACTH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,4DAKAG,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,QAAT,OACjBR,EAAAC,EAAAC,cAAA,MAAIC,MAAM,SAASK,QAASA,GAC1BR,EAAAC,EAAAC,cAAA,MAAIO,QAAQ,IAAIN,MAAM,0BAA0BI,KAI9CG,EAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,KAAMC,EAAfH,EAAeG,YAAf,OAChBd,EAAAC,EAAAC,cAAA,KAAGC,MAAM,cAAcY,KAAMF,GAC3Bb,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,MAAM,sBAAsBS,GAChCZ,EAAAC,EAAAC,cAAA,UAAKY,MAKLE,EAAQ,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,MAAYC,EACJC,IAAMC,UAAS,GADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAC3BM,EAD2BH,EAAA,GAClBI,EADkBJ,EAAA,GAE5BK,EAAmBP,IAAMQ,YAAY,kBAAMF,EAAW,SAAAD,GAAO,OAAKA,MAExE,OAAQ1B,EAAAC,EAAAC,cAAA,SAAOC,MAAM,wBACnBH,EAAAC,EAAAC,cAAC4B,EAAD,CAAYvB,KAAMW,EAAOV,QAASoB,IACjCF,GAAWP,EAAMY,IAAI,SAAAC,GAAI,OAAIhC,EAAAC,EAAAC,cAAC+B,EAAcD,OAI3CE,EAAgB,CACpB,CACEtB,KAAM,0BACNC,KAAM,6CACNC,YAAa,8EAEf,CACEF,KAAM,uDACNC,KAAM,uEACNC,YAAa,sGAEf,CACEF,KAAM,gDACNC,KAAM,6CACNC,YAAa,8GAEf,CACEF,KAAM,qCACNC,KAAM,0CACNC,YAAa,wFAEf,CACEF,KAAM,gCACNC,KAAM,yDACNC,YAAa,+FAUXqB,EAAU,CACd,CACEvB,KAAM,oBACNC,KAAM,+BACNC,YAAa,yGAEf,CACEF,KAAM,2CACNC,KAAM,wCACNC,YAAa,+FAEf,CACEF,KAAM,eACNC,KAAM,oCACNC,YAAa,kDAgBFsB,EAZE,WACf,OAAQpC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACNrC,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,CACErB,MAAM,qCACNC,MAAOe,IACTlC,EAAAC,EAAAC,cAACqC,EAAD,CACErB,MAAM,uCACNC,MAAOgB,MCtFOK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.587b79e9.chunk.js","sourcesContent":["import React from 'react';\nimport './HomePage.css';\n\nconst Header = () => (\n  <header class=\"margined padded-top padded-bottom w40\">\n    <img class=\"avatar\" src=\"/mihail-mikov.jpg\" />\n    <div class=\"hello\">\n      <h1>Hi, I'm Mihail</h1>\n      <p>software engineer, juggler, board game geek</p>\n    </div>\n  </header>\n);\n\nconst TableTitle = ({ text, onClick }) => (\n  <tr class=\"handed\" onClick={onClick}>\n    <td colspan=\"2\" class=\"centered bolded larger\">{text}</td>\n  </tr>\n);\n\nconst TableItem = ({ name, link, description }) => (\n  <a class=\"item tabled\" href={link}>\n    <tr>\n      <td class=\"w33 bolded colored\">{name}</td>\n      <td>{description}</td>\n    </tr>\n  </a>\n);\n\nconst Table = ({ title, items }) => {\n  const [visible, setVisible] = React.useState(true);\n  const toggleVisibility = React.useCallback(() => setVisible(visible => !visible));\n\n  return (<table class=\"margined w75 cleared\">\n    <TableTitle text={title} onClick={toggleVisibility}/>\n    {visible && items.map(item => <TableItem {...item} />)}\n  </table>);\n};\n\nconst presentations = [\n  {\n    name: 'The evolution of an API',\n    link: 'https://debel.github.io/react-evolution/#/',\n    description: 'A presentation about the evolution of React\\'s APIs (with a focus on hooks)',\n  },\n  {\n    name: 'Concurrency Parallelism and Scheduling in JavaScript',\n    link: 'https://debel.github.io/concurrency-parallelism-and-scheduling-js/#/',\n    description: 'A presentation about JavaScript execution and concurrency model with some actors and csp thrown in',\n  },\n  {\n    name: 'Overview of the micro front-ends architecture',\n    link: 'https://debel.github.io/micro-frontends/#/',\n    description: 'A presentation about building sites as a collection of independently deliverable and deployable components',\n  },\n  {\n    name: 'Building resilient JavaScript APIs',\n    link: 'https://debel.github.io/resilient-js/#/',\n    description: 'A presentation about practises and patterns that can help make an API more resilient',\n  },\n  {\n    name: 'Git Panic and how to avoid it',\n    link: 'https://debel.github.io/git-panic-and-how-to-avoid-it/',\n    description: 'A presentation about using git without stress, helpful command options, and best practises',\n  },\n];\n\nconst item = {\n  name: '',\n  link: '',\n  description: '',\n};\n\nconst courses = [\n  {\n    name: 'Modern JavaScript',\n    link: 'https://modern-js.github.io/',\n    description: 'A collection of presentations about JavaScript: langauge features and design, libraries and patterns.',\n  },\n  {\n    name: 'Full-stack JavaScript: React and Express',\n    link: 'https://debel.github.io/fullstack-js/',\n    description: 'A short course about building web applications with the popular React and Express libraries',\n  },\n  {\n    name: 'Intro to Git',\n    link: 'https://intro-to-git.github.io/#/',\n    description: 'A short course about version control with Git',\n  },\n];\n\nconst HomePage = () => {\n  return (<>\n    <Header />\n    <Table\n      title=\"Conference talks and presentations\"\n      items={presentations} />\n    <Table\n      title=\"Short courses and learning materials\"\n      items={courses} />\n  </>);\n};\n\nexport default HomePage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HomePage from './HomePage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HomePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}